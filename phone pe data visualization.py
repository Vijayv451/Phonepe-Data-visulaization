#!/usr/bin/env python
# coding: utf-8

# In[26]:


get_ipython().run_cell_magic('writefile', 'datatest.py', 'import streamlit as st\nimport pandas as pd\nimport plotly.express as px\nimport  altair as alt\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\n\n#---------------------------------------------------------------------------------------------------------------------------------------\n\nimport mysql.connector as sql\n\nmydb = sql.connect(\n  host="localhost",\n  user="root",\n  password="bawadharani",\n  database=\'phone_pe\'\n)\nprint(mydb)\nmycursor = mydb.cursor(buffered=True)\n\n# Fetching datas from Mysql:\nmycursor.execute("SELECT * FROM Agg_Transaction_Table")\ndf=mycursor.fetchall()\nmycursor.execute("SELECT * FROM Longitude_Latitude_State_Table")\nstate=mycursor.fetchall()\nmycursor.execute("SELECT * FROM Districts_Longitude_Latitude_Table")\ndistricts=mycursor.fetchall()\nmycursor.execute("SELECT * FROM district_map_transaction_table")\ndistricts_trans=mycursor.fetchall()\nmycursor.execute("SELECT * FROM district_map_registering_table")\napp_opening=mycursor.fetchall()\nmycursor.execute("SELECT * FROM user_by_device")\nuser_device=mycursor.fetchall()\n#mydb.close()\n\nstate = pd.DataFrame(state, columns = [\'id\',\'code\', \'Latitude\', \'Longitude\', \'State\'])\ndf = pd.DataFrame(df, columns = [\'id\', \'State\', \'Year\', \'Quarter\', \'Transaction_type\', \'Transaction_count\', \'Transaction_amount\'])\ndistricts =pd.DataFrame(districts, columns = [\'id\',\'State\', \'Latitude\', \'Longitude\', \'District\'])\ndistricts_trans = pd.DataFrame(districts_trans, columns = [\'id\',\'State\', \'Year\', \'Quarter\', \'District\', \'Transaction_count\', \'Transaction_amount\'])\napp_opening = pd.DataFrame(app_opening, columns = [\'id\' ,\'State\', \'Year\', \'Quarter\', \'District\', \'Registered_user\', \'App_opening\'])\nuser_device = pd.DataFrame(user_device, columns = [\'id\',\'State\', \'Year\', \'Quarter\', \'Brand\', \'Brand_count\', \'Brand_percentage\'])\n\nstate = state.sort_values(by=\'State\')\nstate = state.reset_index(drop=True)\ndf2 = df.groupby([\'State\']).sum()[[\'Transaction_count\', \'Transaction_amount\']]\ndf2 = df2.reset_index()\n\nchoropleth_data = state.copy()\n\nfor column in df2.columns:\n    choropleth_data[column] = df2[column]\nchoropleth_data = choropleth_data.drop(labels=\'State\', axis=1)\n\ndf.rename(columns={\'State\': \'state\'}, inplace=True)\nsta_list = [\'andaman-&-nicobar-islands\', \'andhra-pradesh\', \'arunachal-pradesh\',\n            \'assam\', \'bihar\', \'chandigarh\', \'chhattisgarh\',\n            \'dadra-&-nagar-haveli-&-daman-&-diu\', \'delhi\', \'goa\', \'gujarat\',\n            \'haryana\', \'himachal-pradesh\', \'jammu-&-kashmir\', \'jharkhand\',\n            \'karnataka\', \'kerala\', \'ladakh\', \'lakshadweep\', \'madhya-pradesh\',\n            \'maharashtra\', \'manipur\', \'meghalaya\', \'mizoram\', \'nagaland\',\n            \'odisha\', \'puducherry\', \'punjab\', \'rajasthan\', \'sikkim\',\n            \'tamil-nadu\', \'telangana\', \'tripura\', \'uttar-pradesh\',\n            \'uttarakhand\', \'west-bengal\']\nstate[\'state\'] = pd.Series(data=sta_list)\nstate_final = pd.merge(df, state, how=\'outer\', on=\'state\')\ndistricts_final = pd.merge(districts_trans, districts,\n                           how=\'outer\', on=[\'State\', \'District\'])\n\n\nst.balloons()\nwith st.container():\n    st.title(\':violet[PhonePe Pulse Data Visualization]\')\n    st.write(\' \')\n    st.subheader(\n        \':violet[PhonePe App Users:]\')\n    st.write(\' \')\n    scatter_year = st.selectbox(\'Please select the Year\',\n                                (\'2018\', \'2019\', \'2020\', \'2021\', \'2022\'))\n    st.write(\' \')\n    scatter_state = st.selectbox(\'Please select State\', (\'andaman-&-nicobar-islands\', \'andhra-pradesh\', \'arunachal-pradesh\',\n                                                         \'assam\', \'bihar\', \'chandigarh\', \'chhattisgarh\',\n                                                         \'dadra-&-nagar-haveli-&-daman-&-diu\', \'delhi\', \'goa\', \'gujarat\',\n                                                         \'haryana\', \'himachal-pradesh\', \'jammu-&-kashmir\', \'jharkhand\',\n                                                         \'karnataka\', \'kerala\', \'ladakh\', \'lakshadweep\', \'madhya-pradesh\',\n                                                         \'maharashtra\', \'manipur\', \'meghalaya\', \'mizoram\', \'nagaland\',\n                                                         \'odisha\', \'puducherry\', \'punjab\', \'rajasthan\', \'sikkim\',\n                                                         \'tamil-nadu\', \'telangana\', \'tripura\', \'uttar-pradesh\',\n                                                         \'uttarakhand\', \'west-bengal\'), index=10)\n    scatter_year = int(scatter_year)\n    scatter_reg_df = app_opening[(app_opening[\'Year\'] == scatter_year) & (app_opening[\'State\'] == scatter_state)]\n    scatter_register = px.scatter(scatter_reg_df, x="District", y="Registered_user",\n                                  hover_name="District", hover_data=[\'Year\', \'Quarter\', \'App_opening\'], size_max=60)\n    st.plotly_chart(scatter_register)\n    st.write(\' \')\n\n# ------------------------------------- Streamlit Tabs for various analysis -----------------------------------------------------------------\ngeo_analysis, Device_analysis, payment_analysis, transac_yearwise, overall_analysis = st.tabs(\n     ["Map analysis", "Device analysis", "Analyse on payment type", "Transaction analysis","Overall analysis"])\n# ------------------------------------------- Geo-analysis ----------------------------------------------------------------------------------\nwith geo_analysis:\n    st.subheader(\':violet[Transaction analysis-:]\')\n    st.write(\' \')\n    Year = st.selectbox(\'Please select the Year\',(\'2018\', \'2019\', \'2020\', \'2021\', \'2022\'), key = \'year_selector\')\n    st.write(\' \')\n    Quarter = st.selectbox(\'Please select the Quarter\',(\'1\', \'2\', \'3\', \'4\'))\n    st.write(\' \')\n    districts_final[\'Year\'] = pd.to_numeric(districts_final[\'Year\'])\n    districts_final[\'Quarter\'] = pd.to_numeric(districts_final[\'Quarter\'])\n\n    Year = int(Year)\n    Quarter = int(Quarter)\n    plot_district = districts_final[(districts_final[\'Year\'] == Year) & (districts_final[\'Quarter\'] == Quarter)]\n    \n    state_final[\'Year\'] = pd.to_numeric(state_final[\'Year\'])\n    state_final[\'Quarter\'] = pd.to_numeric(state_final[\'Quarter\'])\n\n    plot_state = state_final[(state_final[\'Year\'] == Year) & (state_final[\'Quarter\'] == Quarter)]\n    plot_state_total = plot_state.groupby([\'state\', \'Year\', \'Quarter\', \'Latitude\', \'Longitude\']).sum().reset_index()\n    state_code = [\'AN\', \'AD\', \'AR\', \'AS\', \'BR\', \'CH\', \'CG\', \'DNHDD\', \'DL\', \'GA\',\n                  \'GJ\', \'HR\', \'HP\', \'JK\', \'JH\', \'KA\', \'KL\', \'LA\', \'LD\', \'MP\', \'MH\',\n                  \'MN\', \'ML\', \'MZ\', \'NL\', \'OD\', \'PY\', \'PB\', \'RJ\', \'SK\', \'TN\', \'TS\',\n                  \'TR\', \'UP\', \'UK\', \'WB\']\n    plot_state_total[\'code\'] = pd.Series(data=state_code)\n# ------------------------------------------- Geo-visualization of transacion data -----------------------------------------------------\n\nimport plotly.graph_objects as go\nimport plotly.express as px\n\n# Create the choropleth map\nchoropleth_data = state_final.groupby([\'State\',\'Longitude\',\'Latitude\']).sum()\nchoropleth_data.reset_index(inplace=True)\nfig = px.choropleth(\n    choropleth_data,\n    geojson="https://gist.githubusercontent.com/jbrobst/56c13bbbf9d97d187fea01ca62ea5112/raw/e388c4cae20aa53cb5090210a42ebb9b765c0a36/india_states.geojson",\n    featureidkey=\'properties.ST_NM\',\n    locations=\'State\',\n    color=\'Transaction_amount\',\n    color_continuous_scale=\'ice\',\n    hover_data=[\'Transaction_count\', \'Transaction_amount\']\n)\nfig.update_geos(\n    visible=True,\n    projection=dict(type=\'mercator\'),\n    lonaxis=dict(range=[65, 100]),\n    lataxis=dict(range=[0,35])\n)\n\n# Create the scattergeo plots\nfig1 = px.scatter_geo(\n    plot_district,\n    lon=\'Longitude\',\n    lat=\'Latitude\',\n    color=\'Transaction_amount\',\n    size=\'Transaction_count\',\n    hover_name=\'District\',\n    hover_data=[\'State\', \'Transaction_amount\', \'Transaction_count\', \'Year\', \'Quarter\'],\n    title=\'District\',\n    size_max=20\n)\nfig1.update_traces(marker={\'color\': "#d1cb11", \'line_width\': 1})\n\nfig2 = px.scatter_geo(\n    plot_state_total,\n    lon=\'Longitude\',\n    lat=\'Latitude\',\n    hover_name=\'state\',\n    text=\'code\',\n    hover_data=[\'Transaction_count\', \'Transaction_amount\', \'Year\', \'Quarter\'],\n    color_discrete_sequence =[\'#14914d\'],\n    size=\'Transaction_count\'\n)\n\n# Add the scattergeo plots as new traces in the choropleth map\nfig.add_trace(fig1.data[0])\nfig.add_trace(fig2.data[0])\n\n# Set the layout for the combined map\nfig.update_layout(height=600, width=800, title=\'TRANSACTION DATA STATE & DISTRICT WISE\')\n\n# Display the map in the Streamlit app\nif st.button(\'Click here to see map clearly\'):\n    st.plotly_chart(fig)\n    \n#--------------------------------------------------User-Device-Analysis-----------------------------------------------------------\nwith Device_analysis:\n    st.subheader(\'TreeMap view of user device Brands and Usage :\')   \n    pay_year = \'select * from user_by_device\'\n    user_device_treemap = pd.read_sql(pay_year, mydb)\n    \n    import plotly.express as px\n    import numpy as np\n    user_device_treemap[\'Brand_percentage\'] = user_device_treemap[\'Brand_percentage\'].map(lambda x: f"{x*100:.2f}%")\n    \n#---------------- TreeMap view of user device --------------  \n    fig = px.treemap(user_device, path=[px.Constant("Device analyse"),\'State\', \'Brand\',\'Year\',\'Quarter\',\'Brand_count\'],\n                     values=\'Brand_percentage\',\n                     color=\'State\', hover_data=[ \'Brand_count\',\'Quarter\'],\n                     color_continuous_scale=\'RdBu\',\n                     color_continuous_midpoint=np.average(user_device[\'Brand_count\'], weights=user_device[\'Brand_count\']))\n    fig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\n    st.plotly_chart(fig)\n# ----------------------------------------- Payment type analysis of Transacion data ----------------------------------------------------------\nwith payment_analysis:\n    st.subheader(\':violet[Payment type Analysis -> 2018 - 2022:]\')\n    aggtrans = \'select * from agg_transaction_table\'\n    payment_mode = pd.read_sql(aggtrans, mydb)\n# ----------------Animated line chart analysis of payment mode -------------------\n    fig4 = px.scatter(payment_mode, x="Transaction_amount", y="Transaction_type", animation_frame="Year", animation_group="Transaction_amount",\n                     size="Transaction_count", color="Transaction_count", hover_name="Transaction_count", facet_col="Transaction_type",\n                     log_x=True, size_max=45)\n    st.plotly_chart(fig4)\n     \n# --------------------------------------- Transacion data analysis statewise ------------------------------------------------------------------\nwith transac_yearwise:\n    st.subheader(\':violet[statewise Transaction Analysis:]\')\n    state_name = st.selectbox(\'Please select State\', (\'andaman-&-nicobar-islands\', \'andhra-pradesh\', \'arunachal-pradesh\',\n                                                         \'assam\', \'bihar\', \'chandigarh\', \'chhattisgarh\',\n                                                         \'dadra-&-nagar-haveli-&-daman-&-diu\', \'delhi\', \'goa\', \'gujarat\',\n                                                         \'haryana\', \'himachal-pradesh\', \'jammu-&-kashmir\', \'jharkhand\',\n                                                         \'karnataka\', \'kerala\', \'ladakh\', \'lakshadweep\', \'madhya-pradesh\',\n                                                         \'maharashtra\', \'manipur\', \'meghalaya\', \'mizoram\', \'nagaland\',\n                                                         \'odisha\', \'puducherry\', \'punjab\', \'rajasthan\', \'sikkim\',\n                                                         \'tamil-nadu\', \'telangana\', \'tripura\', \'uttar-pradesh\',\n                                                         \'uttarakhand\', \'west-bengal\'), index=10, key=\'transac\')\n    quarter = int(st.radio(\'Please select the Quarter\',\n                                   (\'1\', \'2\', \'3\', \'4\'), horizontal=True, key=\'quarter\'))\n    Transaction_type = st.selectbox(\'Please select the Mode\',\n                                (\'Recharge & bill payments\', \'Peer-to-peer payments\', \'Merchant payments\', \'Financial Services\', \'Others\'), key=\'transactype\')\n    Transaction_values = st.selectbox(\n        \'Please select the values to visualize\', (\'Transaction_count\', \'Transaction_amount\'), key=\'Transaction values\')\n\n    querypay_year = \'select * from agg_transaction_table\'\n    payment_mode_yearwise = pd.read_sql(querypay_year, mydb)\n\n    new_df = payment_mode_yearwise.groupby(\n        [\'State\', \'Year\', \'Quarter\', \'Transaction_type\']).sum()\n    new_df = new_df.reset_index()\n    chart = new_df[(new_df[\'State\'] == state_name) &\n                   (new_df[\'Transaction_type\'] == Transaction_type) & (new_df[\'Quarter\'] == quarter)]\n    \n# --------- Bar chart scatter analysis of transacion data statewise ---------------------------\n\n    year_fig = px.scatter(chart, x=[\'Year\'], y=Transaction_values, color=Transaction_values,\n                 title=\'Transaction_Analysis\')\n    st.plotly_chart(year_fig)\n    \n# -----------------------------------overall india transacion data  -----------------------------------------------------------------\n\nwith overall_analysis: \n    st.subheader(\':violet[India Transaction Analysis:]\')\n    all_values = st.selectbox(\n        \'Please select the values to visualize\', (\'Transaction_count\', \'Transaction_amount\'), key=\'values\')\n    all_trans = new_df.groupby([\'Year\']).sum()\n    all_trans.reset_index(inplace=True)\n    \n    all_trans = px.bar(all_trans, x=\'Year\', y=all_values, color=all_values,\n                     title=\'Transacion of all over India\', color_continuous_scale=\'rdbu\')\n    all_trans.update_layout(height=500, width=800)\n    st.plotly_chart(all_trans)\n\n# -------------------------------India user device analysis --------------------------------------------------------------\n    st.subheader(\'Brand Analysis 2018-2022\')\n    device_type = \'select * from user_by_device\'\n    user_device_overall = pd.read_sql(device_type, mydb)\n    all_brand = user_device_overall.groupby([\'Brand\', \'Year\']).sum()\n    all_brand.reset_index(inplace=True)\n    \n    circle = px.sunburst(all_brand, path=[\'Year\', \'Brand\', \'Brand_count\'], values=\'Brand_percentage\')\n    circle.update_layout(height = 400,width = 400)\n    st.plotly_chart(circle)\n\n    # -------------------------- India registered and app opening --------------------------------------------------------\n    reg_user = \'select * from district_map_registering_table\'\n    overall_reg = pd.read_sql(reg_user, mydb)\n    overall_reg = overall_reg.groupby([\'State\', \'Year\']).sum()\n    overall_reg.reset_index(inplace=True)\n\n    reg = px.bar(overall_reg, x=\'Year\', y=[\n        \'Registered_user\', \'App_opening\'], barmode=\'group\', title=\'Phonepe Users\')\n    reg.update_layout(height=500, width=800)\n    st.plotly_chart(reg)')


# In[ ]:





# In[ ]:




